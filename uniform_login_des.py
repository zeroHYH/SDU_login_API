import re


# ========================
# 主加密流程
# ========================


def strEnc(data: str, *keys: str) -> str:
    """三重DES加密主函数"""
    if not all(data and keys):
        raise ValueError("Keys and data must not be empty.")

    return "".join(
        bt64ToHex(process_block(data[i: i + 4], keys)) for i in
        range(0, len(data), 4)
    )


def process_block(block: str, keys: tuple) -> list:
    """处理4字符数据块，应用所有密钥"""
    bt = strToBt(block.ljust(4, "\0"))

    # 展开所有密钥并进行三轮加密
    for key in (k for key in keys for k in getKeyBytes(key)):
        bt = enc(bt, key)

    return bt


# ========================
# 二进制与十六进制转换
# ========================


def bt64ToHex(byteData: list) -> str:
    """64位二进制转16位十六进制"""
    return "".join(
        bt4ToHex("".join(map(str, byteData[i * 4: i * 4 + 4]))) for i in
        range(16)
    )


def bt4ToHex(bt: str) -> str:
    """4位二进制转1位十六进制"""
    return f"{int(bt, 2):X}" if len(bt) == 4 and re.fullmatch("[01]{4}",
                                                              bt) else ""


# ========================
# 密钥处理
# ========================


def getKeyBytes(key: str) -> list:
    """将字符串密钥转换为二进制块"""
    return [strToBt((key[i: i + 4] + "\0\0\0\0")[:4]) for i in
            range(0, len(key), 4)]


def generateKeys(key_byte: list) -> list:
    """生成16轮子密钥"""
    # 初始密钥置换
    key = [key_byte[8 * (7 - j) + i] for i in range(7) for j in range(8)]
    # 分割左右28位
    left, right = key[:28], key[28:]
    # 生成16轮子密钥
    subkeys = []
    for shift in [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]:
        left = left[shift:] + left[:shift]
        right = right[shift:] + right[:shift]
        subkeys.append([(left + right)[i] for i in
                        [13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9, 22, 18,
                         11, 3, 25, 7, 15, 6, 26, 19, 12, 1, 40, 51, 30, 36,
                         46, 54, 29, 39, 50, 44, 32, 47, 43, 48, 38, 55, 33,
                         52, 45, 41, 49, 35, 28, 31][:48]])
    return subkeys


# ========================
# 核心加密组件
# ========================


def enc(dataByte: list, keyByte: list) -> list:
    """单轮DES加密"""
    keys = generateKeys(keyByte)
    # 初始置换
    ipByte = [dataByte[i] for i in
              [57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
               61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7,
               56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, 26, 18, 10, 2,
               60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6]]
    # 分割左右32位
    ipLeft, ipRight = ipByte[:32], ipByte[32:]
    # 16轮Feistel网络
    for i in range(16):
        # 保存临时左半部分
        tempLeft = ipLeft.copy()
        # 右半部分扩展置换
        expanded = [ipRight[i] for i in
                    [31, 0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 9, 10, 11,
                     12, 11, 12, 13, 14, 15, 16, 15, 16, 17, 18, 19, 20, 19,
                     20, 21, 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 28, 29,
                     30, 31, 0]]
        # 轮函数处理
        sbox_result = sBoxPermute(xor(expanded, keys[i]))
        pbox_result = [sbox_result[i] for i in
                       [15, 6, 19, 20, 28, 11, 27, 16, 0, 14, 22, 25, 4, 17,
                        30, 9, 1, 7, 23, 13, 31, 26, 2, 8, 18, 12, 29, 5, 21,
                        10, 3, 24]]
        # 生成新右半部分
        ipLeft = ipRight
        ipRight = xor(tempLeft, pbox_result)
    # 最终置换
    finalData = ipRight + ipLeft
    return [finalData[i] for i in
            [39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30,
             37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28,
             35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26,
             33, 1, 41, 9, 49, 17, 57, 25, 32, 0, 40, 8, 48, 16, 56, 24]]


def xor(byteOne: list, byteTwo: list) -> list:
    """异或操作"""
    return [a ^ b for a, b in zip(byteOne, byteTwo)]


def sBoxPermute(expandByte: list) -> list:
    """S盒置换"""
    sBoxByte = []
    for m in range(8):
        # 计算S盒索引
        i = expandByte[m * 6] * 2 + expandByte[m * 6 + 5]
        j = (expandByte[m * 6 + 1] << 3
             | expandByte[m * 6 + 2] << 2
             | expandByte[m * 6 + 3] << 1
             | expandByte[m * 6 + 4])
        # 添加4位输出
        sBoxByte.extend(
            [int(bit) for bit in
             f"{[[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
                  [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
                  [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
                  [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],
                 [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
                  [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
                  [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
                  [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]],
                 [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
                  [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
                  [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
                  [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]],
                 [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
                  [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
                  [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
                  [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]],
                 [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
                  [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
                  [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
                  [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]],
                 [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
                  [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
                  [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
                  [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]],
                 [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
                  [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
                  [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
                  [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]],
                 [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
                  [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
                  [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
                  [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]
             [m][i][j]:04b}"])
    return sBoxByte


# ========================
# 工具函数
# ========================


def strToBt(s: str) -> list:
    """字符串转64位二进制"""
    padded = (s + "\0\0\0\0")[:4]
    return [(ord(c) >> (15 - j)) & 1 for c in padded for j in range(16)]
